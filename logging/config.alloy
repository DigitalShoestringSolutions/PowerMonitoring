
logging {
  level  = "info"
  format = "logfmt"
}

discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "default" {
  targets = discovery.docker.containers.targets

  rule {
    action = "labelmap"
    regex = "__meta_docker_container_label_net_digital(shoestring_[^_]+)"
  }

  rule {
    action = "replace"
    source_labels = ["__meta_docker_container_name"]
    target_label = "container"
  } 

  rule {
    action = "replace"
    source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    target_label = "service_module"
  }

   rule {
    action = "drop"
    regex = "^false$"
    source_labels = ["shoestring_log"]
  }
}

loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.default.output
  forward_to = [loki.process.label_log_level.receiver]
}

loki.process "label_log_level" {

  stage.regex {
    expression  = "^.*?(?i:(?P<log_level>debug|info|warning|warn|error|critical)).*$"
  }

  stage.template {
    source   = "log_level"
    template = "{{ ToLower .Value }}"
  }

  stage.static_labels  {
    values = {
      level = "not_set",
    }
  }

  stage.labels {
      values = {
          "level" = "log_level",
      }
  }

  forward_to = [loki.write.local_loki.receiver]
}



loki.write "local_loki" {
  endpoint {
    url = "http://loki.docker.local:3100/loki/api/v1/push"
  }
}